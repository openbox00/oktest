from micro_kernel_cell import KernelCell

Import('*')

#############################################################################
## Build L4
#############################################################################
if args.has_key("sdk"):
    sdk = args["sdk"]
else:
    sdk = False

if sdk:
    sdk_env = build.KengeEnvironment("pistachio")
    kernel_env = build.KengeCell(KernelCell, name=args["name"],
                                 TOOLCHAIN = sdk_env.toolchain)
    kernel_env.args["kernel_type"] = args["config"]
else:
    kernel_env = build.KengeCell(KernelCell, name="pistachio")

kernel_env.process_global_config()

kernel_env.Package("libs/compat")
libs = kernel_env.Package("libs/atomic_ops")
kernel_env.Package("libs/l4")
kernel_env.Package("libs/soc")
kernel_env.Package("libs/kernel")
if kernel_env.toolchain.type == "gnu":
    kernel_env.Package("libs/gcc")

if sdk:
    (kernel, platform, defines, linkscript, plat_src) = kernel_env.Package("pistachio",
                sdk = sdk)
else:
    kernel_env.Package("pistachio")

    # Get max number of threads
    max_threads =  get_int_arg(kernel_env.args, "MAX_THREADS", None)
    kernel_env.set_kernel_config(max_threads = max_threads)

if sdk:
    Return("sdk_env", "kernel", "platform", "defines", "linkscript", "libs", "plat_src")

else:
    Return("kernel_env")
