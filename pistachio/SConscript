Import("env", "cell", "args", "src_glob", "UserError", "conf", "get_bool_arg", "get_int_arg", "get_arg")

import re, os, time
import math

# Check architecture exists
arch = env.machine.arch

src_root = Dir('#').srcnode().abspath

arch_path = os.path.join("arch", arch, args["package"])
arch_path = "#" + arch_path

platform = env.machine.platform
platform_dir =  "#" + os.path.join("platform", platform, args["package"])
generic_platform_dir = "#" + os.path.join("platform", "generic", args["package"])

cpu = env.machine.cpu
arch_version = env.machine.arch_version

wordsize = env.machine.wordsize

if args.has_key("sdk"):
    making_sdk = args["sdk"]
else:
    making_sdk = False

if making_sdk:
    kernel_type = args["kernel_type"]

####
# Setup flint rules
####
env.Append(FLINT_OPTIONS=[File("pistachio.lnt")])

#############################################################################
# Find all the src files
#############################################################################

special_objects = []

# Generic top-level source
src = ["src/*.cc"]

# Source files for most archs
# FIXME: fix x86_64, make this proper included build rules
if 1:
    src += [ arch_path + "/src/*.cc" ,
             arch_path + "/src/*.spp" ,
             arch_path + "/src/%s/*.cc" % (env.toolchain.type),
             arch_path + "/src/%s/*.spp" % ( env.toolchain.type),
             arch_path + "/cpu/%s/src/*.cc" % ( cpu ),
             arch_path + "/cpu/%s/src/%s/*.cc" % ( cpu, env.toolchain.type),
             ]

    if hasattr(env.machine, "arch_version"):
        src += [
            arch_path + "/v%s/src/*.cc" % (arch_version),
            arch_path + "/v%s/src/*.spp" % (arch_version),
            ]

    platform_src = ["%s/src/*.c" % platform_dir,
                    "%s/src/*.spp" % platform_dir,
                    "%s/src/%s/*.c" % (platform_dir, env.toolchain.type),
                    "%s/src/%s/*.spp" % (platform_dir, env.toolchain.type),
                    "%s/src/*.c" % generic_platform_dir]

    src = Flatten([src_glob(glob) for glob in src])
    platform_src = Flatten([src_glob(glob) for glob in platform_src])

    # Remove anything "asmsyms" the glob picked up
    src = [src_file for src_file in src if "asmsyms" not in src_file ]

#############################################################################
# Global config options - provided by the project SConstruct (eg projects/iguana)
#############################################################################

# Read in the scheduling behaviour
sched_algorithm = get_arg(args, "SCHEDULING_ALGORITHM", "").lower()

#############################################################################
# Config defines
#############################################################################

cppdefines = [
    ("__API__", "v4"),
    ("__ARCH__", arch),
    ("__CPU__", env.machine.cpu),
    ("__PLATFORM__", platform),
    
    ("CONFIG_ARCH_%s" % arch.upper(), 1),
    ("CONFIG_PLAT_%s" % platform.upper(), 1),
    ("CONFIG_CPU_%s_%s" % (arch.upper(), env.machine.cpu.upper()), 1),
    ]


config_xip = get_bool_arg(args, "XIP", False)
if config_xip:
    cppdefines.append(("CONFIG_XIP", 1))

(year, month, day) = time.localtime()[0:3]



# Machine configuration
if env.machine.endian == "big":
    cppdefines += [("CONFIG_BIGENDIAN", 1)]
else:
    cppdefines += [("CONFIG_LITTLEENDIAN", 1)]

cppdefines +=  [("CONFIG_IS_32BIT", 1)]

# Set 1 smp processor
default_max_spaces = 256
max_spaces = get_int_arg(args, "MAX_SPACES", default_max_spaces)
cppdefines += [("CONFIG_MAX_SPACES", "%sU" % max_spaces)]

# Support for contexts bitmaps
enable_context_bitmasks = get_bool_arg(args, "CONTEXT_BITMASKS", False);
if (enable_context_bitmasks):
    cppdefines += [("CONFIG_CONTEXT_BITMASKS", 1)]
    cppdefines += [("CONFIG_LOCKFREE_SCHEDULER", 1)]


asm_fastpath_supported = False
c_fastpath_supported = False


# ARM has a fastpath implementation
if arch == "arm":
    asm_fastpath_supported = True
    c_fastpath_supported = (sched_algorithm != 'inheritance')

# Fastpaths
if get_bool_arg(args, "ENABLE_FASTPATHS", True):
    # Enable arch-specific generic fastpaths.
    cppdefines += [("CONFIG_ENABLE_FASTPATHS", 1)]

    # If assembly fastpaths are enabled, use those.
    if get_bool_arg(args, "EXCEPTION_FASTPATH", True) and asm_fastpath_supported:
        cppdefines += [("CONFIG_EXCEPTION_FASTPATH", 1)]
    if get_bool_arg(args, "IPC_FASTPATH", True) and asm_fastpath_supported:
        cppdefines += [("CONFIG_IPC_FASTPATH", 1)]



#architecture options
if arch == "arm":
    if arch_version == 5:
        cppdefines += [("CONFIG_ARM_VER", 5)]
        cppdefines += [("CONFIG_ENABLE_FASS", 0)]

    if get_bool_arg(args, "DEFAULT_CACHE_ATTR_WB", True):
        cppdefines += [("CONFIG_DEFAULT_CACHE_ATTR_WB", 1)]


if hasattr(env.machine, "subplatform"):
    subplatform = env.machine.subplatform.upper()
    cppdefines += [("CONFIG_SUBPLAT_%s" % subplatform)]

if hasattr(env.machine, "uart"):
    uart = env.machine.uart.upper()
    cppdefines += [("CONFIG_UART_%s" % uart, 1)];


############################################################################
## Pull in any arch-specific Sconscripts
############################################################################ 

root_path = Dir('#').srcnode().abspath
file_name = os.path.join( arch_path,  "arch.scons")

if os.path.exists(file_name):
    execfile(file_name)


#############################################################################
# Include Path
#############################################################################

platform_cppath = env.scons_env['CPPPATH'] + ["%s/include/" % platform_dir] + ["%s/include/" % generic_platform_dir]
public_headers = [("include/", "include/%(name)s/"),
                  ("kdb/include/", "include/%(name)s/kdb/"),
                  ("include/generic/", "include/%(name)s/generic/"),
                  ("%s/include/" % arch_path, "include/%(name)s/arch/"),
                  ("%s/cpu/%s/include/" % (arch_path, cpu), "include/%(name)s/cpu/"),
                  ]
if hasattr(env.machine, "arch_version"):
    public_headers.append(("%s/v%s/include/" % (arch_path, arch_version), "include/%(name)s/arch/ver/"))

env.Append(CPPPATH = ["include"],
           CPPDEFINES = cppdefines)

if hasattr(env.machine, "arch_version"):
    env.Append(CPPPATH = [ "%s/v%s/include" % (arch_path, arch_version) ])

#platform_cppath = env.scons_env['CPPPATH']
paths = [("include/arch", "%s/include" % arch_path),
         ("include/plat", "%s/include" % platform_dir),
         ("include/plat", "%s/include" % generic_platform_dir),
         ("include/cpu", "%s/cpu/%s/include" % (arch_path, cpu)),
         ("include/kdb", "kdb/include")]

if hasattr(env.machine, "arch_version"):
    paths.append(("include/arch/ver", "%s/v%s/include" % (arch_path, arch_version)))

for dest_path, src_path in paths:
    headers = src_glob(os.path.join(src_path, "*.h"))
    for header in headers:
        dir, header_file = os.path.split(header)
        env.Command(os.path.join(dest_path, header_file), os.path.join(src_path, header_file),
                    Copy('$TARGET', '$SOURCE'))

#############################################################################
# Voodoo: asmsyms.h
#############################################################################
def mk_asmsyms(target, source, env):
    out = open(target[0].abspath, "w")
    f = open(source[0].abspath)

    out.write("/* machine-generated file - do NOT edit */\n")
    out.write("#ifndef __ASMSYMS_H__\n")
    out.write("#define __ASMSYMS_H__\n\n")

    for line in file(str(source[0])):
        if "SYM" in line:
            (_, name, value) = line.split()
            val = long(value)
            if val < 0:
                val += (2 ** wordsize)
            out.write("#define %-25s 0x%x\n" % (name, val))
    out.write("\n#endif /* __ASMSYMS_H__ */\n")

asmsyms = env.AsmFile("asmsyms.s", arch_path + "/src/asmsyms.cc" ,
                      CXX_WARNINGS = [])
asmsyms_h = env.Command(["include/asmsyms.h"], "asmsyms.s",
                        Action(mk_asmsyms, "[SYMS] $TARGET"))

#############################################################################
# Voodoo: tcb_layout.h
#############################################################################
def mk_struct_layout_c(target, source, env ):
    struct_name = env['struct_name']
    prefix = env['prefix']

    out = open(target[0].abspath, "w");
    out.write("""

#include <l4.h>
#define BUILD_TCB_LAYOUT
#define O(w,x) (u32_t)((char*) &w.x - (char*)(&w))
#if defined(__GNUC__)
#define DEFINE(label, val) \
    __asm__ __volatile__ ("DEFINE " #label " %n0" : : "i" (-val));
#elif defined(__RVCT_GNU__)
#define DEFINE(label, val) \
    DEFINE label __cpp(val);
#endif
""")
    out.write("#include <%s>\n" % source[0].abspath)
    out.write("%s foo;\n" % (struct_name ))
    out.write("""

#if defined(__RVCT_GNU__)
__asm
#endif
void make_offsets() {
""" )
    for fn in source:
        printme = False
        for line in open(fn.abspath).readlines():
            line = line.strip()
            if "STRUCT_START_MARKER" in line:
                printme = True
                continue
            if "STRUCT_END_MARKER" in line:
                printme = False
                continue
            if printme:
                line = line.split(';')
                if len(line) > 1:
                    line = line[0] + ";"
                else:
                    line = line[0]
                if line.endswith(';'):
                    name = line.split()[-1][:-1].split('[')[0]
                    out.write('DEFINE(%s%s, O(foo, %s)) \n' %
                              (prefix, name.upper(),  name))
                elif line.startswith('#'):
                    out.write(line + "\n")
    if 'size_prefix' in env.Dictionary():
        out.write('DEFINE(%sSIZE, sizeof(%s))\n' % (env['size_prefix'], struct_name))
    out.write("\n}\n")


def mk_tcblayout(target, source, env):
    out = open(target[0].abspath, "w")
    out.write("""/* @LICENCE(\"Open Kernel Labs, Inc.\", \"%s\")@ */

    /* machine-generated file - do NOT edit */
#ifndef __%s_LAYOUT__H__
#define __%s_LAYOUT__H__

//#define BUILD_%s_LAYOUT 1
    """% (time.localtime().tm_year, env['name'], env['name'], env['name'].upper()))

    for line in file(str(source[0])):
        if "DEFINE" in line:
            (_, name, offset) = line.split()
            off = int(offset) 
            out.write("#define %-35s 0x%02x /* %4d */\n" % (name, off, off))
            
    out.write("\n#endif /* __TCB_LAYOUT__H__ */\n")


env.Command("context_layout.cc",
            ["%s/include/thread.h" % arch_path],
            Action(mk_struct_layout_c, "[CGEN] $TARGET"), struct_name="%s_irq_context_t" % env.machine.arch, prefix="PT_", size_prefix="PT_")

env.Command("tcb_layout.cc",
            ["include/tcb.h"],
            Action(mk_struct_layout_c, "[CGEN] $TARGET"), struct_name="tcb_t", prefix="OFS_TCB_")

env.Command("utcb_layout.cc",
            ["%s/include/utcb.h" % arch_path],
            Action(mk_struct_layout_c, "[CGEN] $TARGET"), struct_name="utcb_t", prefix="OFS_UTCB_")

env.Command("arch_ktcb_layout.cc",
            ["%s/include/ktcb.h" % arch_path],
            Action(mk_struct_layout_c, "[CGEN] $TARGET"), struct_name="arch_ktcb_t", prefix="OFS_ARCH_KTCB_")

# Generate a command to build the ASM file from tcb_layout.cc to get the defines
tcb_layout_s = env.AsmFile("tcb_layout.cc")
context_layout_s = env.AsmFile("context_layout.cc")
utcb_layout_s = env.AsmFile("utcb_layout.cc")
ktcb_layout_s = env.AsmFile("arch_ktcb_layout.cc")

# Generate the tcb_layout.h from the asm file
env.Command("include/tcb_layout.h", "tcb_layout.s", Action(mk_tcblayout, "[OFS ] $TARGET"), name="TCB")
env.Command("include/utcb_layout.h", "utcb_layout.s", Action(mk_tcblayout, "[OFS ] $TARGET"), name="UTCB")
env.Command("include/ktcb_layout.h", "arch_ktcb_layout.s", Action(mk_tcblayout, "[OFS ] $TARGET"), name="KTCB")
hdr = env.Command("include/context_layout.h", "context_layout.s", Action(mk_tcblayout, "[OFS ] $TARGET"), name="CONTEXT")

# Copy into the export area.  Needed to implement enter_kdebug() on
# some architectures.
env.scons_env.Install(env.builddir + "/include/kernel", hdr)



kernel_src = src

#############################################################################
# Build the linkerscript
#############################################################################
linker_script_src = File("%s/src/%s/linker.lds" %
                             (arch_path, env.toolchain.type))

# linker scripts don't work for apple/macho targets
if( getattr( env.machine, "macho", False ) == False ):
    linkscript = env.CppFile("lds.tmp", linker_script_src,
                             CPPDEFINES=env.Extra( ["ASSEMBLY"]))
else:
    # Make the macho ld ordering file look like a linker script
    kipobj = env.Command(["kip.order.X"], ["%s/src/kip.order" % arch_path], 
                         "cp $SOURCE $TARGET")

    
#############################################################################
# Build the kernel
#############################################################################

platform_lib = env.KengeLibrary("platform",
                                CPPPATH=platform_cppath,
                                public_headers = (),
                                source = platform_src)

if getattr( env.machine, "macho", False ) == False:
    # not macho
    if env.machine.platform == "pc99":
        kern_phys_align = env.ALIGN_ELF
        kern_phys_addr = env.ADDR_AS_BUILT
    else:
        # not pc99 or macho
        kern_phys_align = env.ALIGN_ELF
        kern_phys_addr = env.ADDR_ALLOC

    addressing = cell.Addressing(virt_addr = 0x0,
                                 phys_addr = kern_phys_addr)

    if config_xip:
        xip_segments = [segment]
    else:
        xip_segments= None

    linkflags = env.toolchain.dict["LINKFLAGS"] + env.machine.link_flags

    # The entry point is in the platform library, so force the symbol
    # to be undefined to ensure that it is loaded.
    linkflags += ['-u',  '_start']

    obj = env.KengeProgram("l4kernel", #buildname="kernel",
                           source = kernel_src,
                           public_headers = (),
                           LINKSCRIPTS=linkscript,
                           _LINKADDRESS = "",
                           LINKFLAGS=linkflags,
                           LIBS={True: [],
                                 False: ["atomic_ops", "platform"]}[making_sdk],
                           extra_source = special_objects,
                           relocatable = making_sdk)

    cell.set_kernel(obj, segments = xip_segments,
                    addressing = addressing)
else:

    Return("obj")
