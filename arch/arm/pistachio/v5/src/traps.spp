/*
 * ARM Exception Vectors and IPC /Exception Fastpaths
 */

#include <l4.h>
#include <tcb_layout.h>
#include <ktcb_layout.h>
#include <context_layout.h>
#include <asmsyms.h>
#include <arch/globals.h>
#include <arch/thread.h>
#include <kernel/arch/asm.h>

        TRAPS_BEGIN_MARKER  /* Do not remove */

        /* RVCT: Explicitly import symbols */
        IMPORT  __stack
        IMPORT  __scheduler
        IMPORT  arm_memory_abort

/* Relative branches, loads and stores to locations outside this 4K page are
 * broken, as this is remapped to the high interrupt vector 0xFFFF0000
 */
        BEGIN_PROC_TRAPS(arm_high_vector)
        b       arm_reset_exception
		nop
        nop
        b       arm_prefetch_abort_exception
        b       arm_data_abort_exception
        nop
        nop
        /* FIQ exception vectors here */
        END_PROC_TRAPS(arm_high_vector)
/*
 * ARM Reset Exception
 */
        BEGIN_PROC_TRAPS(arm_reset_exception)
        /* Save r14, SPSR */
        add     lr,     lr,     #1
        str     lr,     tmp_r14
        mrs     lr,     spsr
        str     lr,     tmp_spsr

        /* Enter supervisor mode, IRQ/FIQ disabled */
        msr     cpsr_c, #0x000000d3

        /* since SAVE_ALL_INT only does user's banked lr */
        str     lr,     [sp, #(-PT_SIZE + PT_KLR)]

        ldr     lr,     tmp_r14

        SAVE_ALL_INT_TMP_LINKED_DACR    /* Macro sets r12 */

        SET_KERNEL_DACR_LINKED      /* Macro uses register ip/r12 */

        /* Call C function reset_exception(arm_irq_context_t *) */
        adr     lr,     arm_common_return
        jump    r1
        END_PROC_TRAPS(arm_reset_exception)

/*
 * ARM Common Return
 */
        ALIGN   32
        BEGIN_PROC_TRAPS(arm_common_return)
        mov     r0,     #ARM_GLOBAL_BASE
        ldr     r0,     [r0, #OFS_GLOBAL_CURRENT_TCB]
        SET_USER_DACR
        LOAD_CONTEXT_INTO_SP
        /* LOAD_CONTEXT_INTO_SP will have z flag set if return to user */
        ldreq   r1,     [r0, #OFS_TCB_POST_SYSCALL_CALLBACK]
        clzeq   r1,     r1 /* r1 contains callback function, 0xFXXXXXXX */
        cmpeq   r1,     #0 /* r1 should be 0, if has callback function */

        ldr     lr,     [sp, #PT_CPSR]
        ldmib   sp,     {r0-r14}^
        nop
        msr     spsr_cxsf,   lr
        ldr     lr,     [sp, #PT_PC]
        add     sp,     sp,     #PT_SIZE

        subnes  pc,     lr,     #1

        /* If there is a post-syscall callback, handle that now. */
        jump    r0
        END_PROC_TRAPS(arm_common_return)
/*
 * Prefetch Abort Exception.
 */
        ALIGN   32
        BEGIN_PROC_TRAPS(arm_prefetch_abort_exception)
        /* Save R14, SPSR */
        sub     lr,     lr,     #3
        str     lr,     tmp_r14
        mrs     lr,     spsr
        str     lr,     tmp_spsr

        /* Enter supervisor mode, IRQ/FIQ disabled */
        msr     cpsr_c, #0x000000d3

        /* since SAVE_ALL_INT only does user's banked lr */
        str     lr,     [sp, #(-PT_SIZE + PT_KLR)]
        /* Load saved user's program counter */
        ldr     lr,     tmp_r14

        /* Even if the fault came from the kernel, it won't be on the current
         * stack as KTCBs are faulted on for allocation prior to the use of
         * their stacks
         */

        SAVE_ALL_INT_TMP_LINKED_DACR    /* Macro sets r12 */

        /* Faulting address */
        ldr     r1,     [r0, #PT_PC]

        /* Pointer to base of current arm_irq_context_t record */
        mov     r2,     r0

        sub     r1,     r1,     #1  /* Fixup address */

        SET_KERNEL_DACR_LINKED      /* Macro uses register ip/r12 */

        /* Handle arm memory abort */
        ldr     r4,     =arm_memory_abort

        /* Fault status - not updated on prefetch abort */
        mov     r0,     #0
        /* Signal a prefetchabort */
        mov     r3,     #0

        /* Process the page fault */
        adr     lr,     arm_abort_return
        jump    r4
        END_PROC_TRAPS(arm_prefetch_abort_exception)

/*
 * Data access fault handler vector
 */
        ALIGN   32
        BEGIN_PROC_TRAPS(arm_data_abort_exception)
        /* Save R14, SPSR */
        sub     lr,     lr,     #7
        str     lr,     tmp_r14
        mrs     lr,     spsr
        str     lr,     tmp_spsr

        /* Enter supervisor mode, IRQ/FIQ disabled */
        msr     cpsr_c, #0x000000d3

        /* since SAVE_ALL_INT only does user's banked lr */
        str     lr,     [sp, #(-PT_SIZE + PT_KLR)]
        /* Load saved user's program counter */
        ldr     lr,     tmp_r14

        /* Even if the fault came from the kernel, it won't be on the current
         * stack as KTCBs are faulted on for allocation prior to the use of
         * their stacks
         */

        SAVE_ALL_INT_TMP_LINKED_DACR    /* Macro sets r12 */

        /* Pointer to base of current arm_irq_context_t record */
        mov     r2,     r0

        ldr     r4,     =arm_memory_abort

        SET_KERNEL_DACR_LINKED      /* Macro uses register ip/r12 */

        /* Fault status */
        mrc     p15, 0, r0, c5, c0, 0
        /* Faulting address */
        mrc     p15, 0, r1, c6, c0, 0
        /* Signal a dataabort */
        mov     r3,     #1

        /* Process the page fault */
        adr     lr,     arm_abort_return
        jump    r4
        END_PROC_TRAPS(arm_data_abort_exception)

        BEGIN_PROC_TRAPS(arm_abort_return)

        /* After LOAD_CONTEXT_INTO_SP, 'eq' is set if returning from userspace,
         * or 'lt' if returning from kernel. */
        LOAD_CONTEXT_INTO_SP

        /* Avoid checks if jumping to userspace. */
        bne     arm_abort_return_kernel

        /* If we have pending work to perform prior to the TCB returning back
         * to userspace, perform that work now. r0 is loaded to current_tcb by
         * LOAD_CONTEXT_INTO_SP macro. */
        ldr     r1,     [r0, #OFS_TCB_POST_SYSCALL_CALLBACK]

        SET_USER_DACR

        /* If there is a pointer in post_syscall_callback, we need to
         * run it before returning from this exception. Set 'gt' if
         * we need to do the callback. */
        cmp     r1,     #0
        bxne    r1

LABEL(arm_abort_return_kernel)
        /* Puts user's program counter/status reg in tmp_r14/tmp_spsr */
        RESTORE_ALL_ABT

        ldr     lr,     [sp, #(-PT_SIZE + PT_KLR)]

        /* Enter abort mode, IRQ/FIQ disabled */
        msr     cpsr_c, #0x000000d7

        /* Restore R14, SPSR */
        ldr     sp,     tmp_spsr
        /* Load saved user's program counter */
        ldr     lr,     tmp_r14
        msr     spsr_cxsf,      sp

        /* Return back from abort. */
        subs    pc,     lr,     #1

        END_PROC_TRAPS(arm_abort_return)

        ALIGN   32
        /* these accessed at remapped (not compile) address */
        VECTOR_WORD(tmp_r14)
        DCDU    0xdeadbeef
        VECTOR_WORD(tmp_spsr)
        DCDU    0xdeadbeef
        VECTOR_WORD(kernel_access)
        DCDU    0x55555555
        VECTOR_WORD(stack_top)
        DCDU    __stack + STACK_TOP
        VECTOR_WORD(scheduler_ptr)
        DCDU    __scheduler
        VECTOR_WORD(num_tcb_handles)
        DCDU    0xdeadbeef
        VECTOR_WORD(tcb_handle_array)
        DCDU    0xdeadbeef

        LTORG
        ALIGN   4096

        END
