Import("env", "args", "conf")
import os

# Get SRC directory
src_root = Dir('#').srcnode().abspath

# Check architecture exists
arch = env.machine.arch
arch_path = os.path.join('arch', arch, args['package'])

possible_arch_path = os.path.join("cust", args["cust"], "arch", arch, args["package"])
if os.path.exists(os.path.join(src_root, possible_arch_path)):
    arch_path = possible_arch_path

#if not os.path.exists(os.path.join(src_root, arch_path)):
#    print "architecture %s is not yet supported by atomic_ops." % (arch)

arch_path = "#" + arch_path

# Setup library
source = [ arch_path + "/src/*.spp" ]

arch_headers =  arch_path + "/include/"
public_headers = [("include/", "include/%(name)s/"),
                  (arch_headers, "include/%(name)s/arch/"),
                  ]

if hasattr(env.machine, "arch_version"):
    source.append(arch_path + "/v%s/src/*.spp" % (env.machine.arch_version))
    public_headers += [
        (arch_path + "/v%s/include/" % (env.machine.arch_version),
         "include/%(name)s/arch/") ]

if env.test_libs and "atomic_ops" in env.test_libs:
    source.append("test/*.c")
    public_headers.append(("test/", "include/%(name)s/"))

lib = env.KengeLibrary("atomic_ops", source = source, public_headers = public_headers)

Return("lib")
