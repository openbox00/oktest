Import("env", "args", "conf")
import os

src_root = Dir('#').srcnode().abspath

# Check architecture exists
arch = env.machine.arch
arch_path = os.path.join('arch', arch, args['package'])

cpu = env.machine.cpu

possible_arch_path = os.path.join("cust", args["cust"], "arch", arch, args["package"])
if os.path.exists(os.path.join(src_root, possible_arch_path)):
    arch_path = possible_arch_path

#if not os.path.exists(os.path.join(src_root, arch_path)):
#    print "architecture %s is not yet supported by libl4." % (arch)
arch_path = "#" + arch_path

cust_path = os.path.join('cust', args['cust'], args['package'], 'cust')
if not os.path.exists(os.path.join(src_root, cust_path)):
    cust_path = os.path.join(args['package'], 'cust', args['cust'])
#    if not os.path.exists(os.path.join(src_root, cust_path)):
#        print "customer %s is not yet supported by libl4." % (args['cust'])
cust_path = "#" + cust_path

# Setup library

cppdefines = [("__L4_ARCH__", env.machine.arch), "L4_ARCH_%s" % env.machine.arch.upper()]

# Support for kernel/hybrid mutexes
if args["system"] == "pistachio":
    mutex_type = args.get("MUTEX_TYPE", "hybrid").lower()
else:
    mutex_type = args.get("MUTEX_TYPE", "user").lower()

if (mutex_type == "hybrid"):
    cppdefines += [("CONFIG_HYBRID_MUTEXES", 1)]

source = [arch_path + "/src/*.c",
          arch_path + "/src/*.spp" 
         ]

public_headers = [("include/", "include/l4/"),
                  ("%s/cpu/%s/include/" % (arch_path, cpu), "include/%(name)s/cpu/"),
                  (os.path.join(arch_path, "include", ""), "include/l4/arch/"),
                  (os.path.join(cust_path, "include", ""), "include/l4/cust/")
                 ]

if hasattr(env.machine, "arch_version"):
    arch_version = env.machine.arch_version
if hasattr(env.machine, "arch_version"):
    public_headers.append(("%s/v%s/include/" % (arch_path, arch_version), "include/%(name)s/arch/ver/"))


env.Append(CPPDEFINES=cppdefines)

lib = env.KengeLibrary("l4",source=source, public_headers=public_headers)
Return("lib")
