import os
Import("env","args")

# Get src directory
src_root = Dir('#').srcnode().abspath

# Check architecture exists
arch = env.machine.arch
arch_path = os.path.join('arch', arch, args['package'])

# Use customer forked version of the arch package, if it exists
possible_arch_path = os.path.join("cust", args["cust"], "arch", arch, args["package"]) 
if os.path.exists(os.path.join(src_root, possible_arch_path)):
    arch_path = possible_arch_path

# Setup header directories to search.
public_headers = [
        ("include/",                              "include/compat/"),
        ("include/toolchain/",                    "include/compat/toolchain/"),
        ("#" + arch_path + "/include/",           "include/compat/arch/"),
        ("#" + arch_path + "/include/toolchain/", "include/compat/arch/toolchain/")
        ]

lib = env.KengeLibrary("compat", public_headers=public_headers)
Return("lib")

