Import("env", "args", "conf", "get_arg", "get_bool_arg")
import os


# Get SRC directory
src_root = Dir('#').srcnode().abspath

# Check architecture exists
arch = env.machine.arch
arch_path = os.path.join('arch', arch, args['package'])

# Use customer forked version of the arch package, if it exists
possible_arch_path = os.path.join("cust", args["cust"], "arch", arch, args["package"]) 
if os.path.exists(os.path.join(src_root, possible_arch_path)):
    arch_path = possible_arch_path

if not os.path.exists(os.path.join(src_root, arch_path)):
    print "architecture %s is not yet supported by libc." % (arch)
arch_path = "#" + arch_path

if args['system'] in ('iguana', 'iguana_server', 'posix'):
    system = args['system']
else:
    system = 'okl4'

# Setup library
if args["is_rootserver"]:
    filesystem = get_arg(args, "filesystem", "null")
else:
    filesystem = get_arg(args, "filesystem", "static")

if args["is_rootserver"]:
    env.KengeCRTObject([arch_path + "/crt/crt0_rootserver.spp"])
else:
    env.KengeCRTObject([arch_path + "/crt/crt0.spp"])

#arch paths first so architecture specific optimized functions can be provided
source = [arch_path + "/src/fs-%s/*.c" % filesystem,
          arch_path + "/src/*.spp",
          arch_path + "/src/*.c",
          arch_path + "/src/sys-%s/*.spp" % system,
          arch_path + "/src/fs-%s/*.c" % filesystem,
          arch_path + "/src/sys-%s/*.c" % system,
          "src/sys-%s/*.c" % system,
          "src/fs-%s/*.c" % filesystem,
          "src/*.c"]
public_headers = [
                  ("include/",   "include/%(name)s/"),
                  ("include/",   "include/"),
                  ("include/sys/",   "include/sys/"),
                  (arch_path + "/include/",  "include/arch/")
                 ]
if env.test_libs:
    if "c" in env.test_libs:
        source.append("test/*.c")
        source.append("test/fs-%s/*.c" % filesystem)
        public_headers.append(("test/", "include/%(name)s/"))

if args['is_rootserver']:
    libs=["mutex","atomic_ops"]
    try:
        if args["serial_driver"] != None:
            libs.append(args["serial_driver"])
            libs.append("serial")
            env.Append(CPPDEFINES=[("SERIAL_DRIVER", args["serial_driver"])])
    except:
        pass
    try:
        env.Append(CPPDEFINES=[("SERIAL_PHYSMEM_BEGIN", args["serial_physmem_begin"])])
        env.Append(CPPDEFINES=[("SERIAL_PHYSMEM_END", args["serial_physmem_end"])])
    except:
        pass
else:
    libs=["mutex","atomic_ops","fs"]

# Whether or not to allow linking of functions with include the UNIMPLEMENTED
# macro.
if get_bool_arg(args, "enable_unimplemented_linkable", False):
    env.Append(CPPDEFINES = [("CONFIG_UNIMPLEMENTED_LINKABLE", 1)])

lib = env.KengeLibrary("c", source=source, LIBS=libs, public_headers=public_headers)

Return("lib")
